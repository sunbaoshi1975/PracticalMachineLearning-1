training <- read.csv('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv')
testing <- read.csv('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv')
View(training)
training$class
colnames(training)
training[,1]
training[1,]
length(training)
sum(is.na(training[,1]))
sum(is.na(training[,2]))
sum(is.na(training[,3]))
sum(is.na(training[,4]))
for (i in c(1:length(training)))
)
for (i in c(1:length(training)))
{
res[i] <- sum(!is.na(training[,i]))
}
col <- colnames(training)
col
sum(!is.na(training[,21]))
sum(!is.na(training[,kurtosis_pitch_arm]))
sum(!is.na(training[,"kurtosis_pitch_arm"]))
sum(!is.na(training[,"kurtosis_picth_arm"]))
sum(!is.null(training[,"kurtosis_picth_arm"]))
View(testing)
View(testing)
sum(training[,"kurtosis_picth_arm"]=="")
sum(!training[,"kurtosis_picth_arm"]=="")
sum(!training[,"kurtosis_picth_arm"]=="")/dim(training)[1,]
sum(!training[,"kurtosis_picth_arm"]=="")/dim(training)[1]
rowsum(training)
trainingdata <- read.csv("./pml-training.csv",na.strings=c("NA,"#DIV/0!",""))
)
"
""
trainingdata <- read.csv("./pml-training.csv",na.strings=c("NA","#DIV/0!",""))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfil="./pml-training.csv",
method="curl")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfil="./pml-training.csv",)
View(testing)
View(testing)
training <- read.csv("./pml-training.csv",na.strings=c("NA","#DIV/0!",""))
testing <- read.csv("./pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
traning[,1]
training[1]
training[,1]
head(training[,1])
head(training[,2])
head(training[,3])
training1 <- training[,colSums(is.na(trainingset)) == 0]
training1 <- training[,colSums(is.na(training)) == 0]
head(training1)
View(training1)
View(training1)
View(trainingdata)
View(trainingdata)
training1 <- training[,colSums(is.na(training))!=nrow(training)]
testing <- testing[,colSums(is.na(testing))!=nrow(testing)]
View(training1)
View(training1)
head(trainingset[,-c(1:7)])
head(training[,-c(1:7)])
library(carat)
library(caret)
training$classe
colnames(training)
colnames(training1)
# Delete invalid columns with all NAs
training <- training[,colSums(is.na(training))==0]
testing <- testing[,colSums(is.na(testing))==0]
# Delete irrelevent columns first 7 cols
training  <-training[,-c(1:7)]
testing <-testing[,-c(1:7)]
View(training)
View(training)
inTrain <- createDataPartition(y=training$classe, p=0.75, list=F)
subTrain <- training[inTrain,]
subTest <- training[-inTrain,]
inTrain <- createDataPartition(y=training$classe, p=0.75, list=F)
subTraining <- training[inTrain,]
subTesting <- training[-inTrain,]
library(randomForest)
install.packages("randomForest")
library(randomForest)
model_rf <- randomForest(classe ~., data=subTraining,method="class")
pred_rf <- predict(model_rf, subTesting, type="class")
confusionMatrix(pred_rf,subTesting$classe)
set.seed(12345)
res <- predict(model_rf, testing, type="class")
res
testing <- testing[,colSums(is.na(training))==0]
trainingdata <- read.csv("./pml-training.csv",na.strings=c("NA","#DIV/0!",""))
testingdata <- read.csv("./pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
training <- trainingdata[,colSums(is.na(testingdata))==0]
testing <- testingdata[,colSums(is.na(tesingdata))==0]
testing <- testingdata[,colSums(is.na(tesingdata))==0]
testing <- testingdata[,colSums(is.na(testingdata))==0]
# Delete irrelevent columns first 7 cols
training  <-training[,-c(1:7)]
testing <-testing[,-c(1:7)]
head(training)
dim(training)
dim(testing)
res <- predict(model_rf, testing, type="class")
# Divide training data to subtraining and subtesting
inTrain <- createDataPartition(y=training$classe, p=0.75, list=F)
subTraining <- training[inTrain,]
subTesting <- training[-inTrain,]
```
```{r}
# Use RandomForest model to train and predict
model_rf <- randomForest(classe ~., data=subTraining,method="class")
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
confusionMatrix(pred_rf,subTesting$classe)
?randomForest
model_rf <- randomForest(classe ~.,
data=subTraining,
na.action=na.omit)
?predict
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9959, 95% CI(0.9937, 0.9975)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting)
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
class(model_rf)
library(rpart) # Regressive Partitioning and Regression trees
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
pred_rf <- predict(model_rf, subTesting, type="class")
# Summarize subTesting results.
# Accuracy=0.9955, 95% CI(0.9932, 0.9972)
confusionMatrix(pred_rf,subTesting$classe)
?e1071
install.packages("e1071")
library(e1071)
install.packages("e1071")
library(e1071)
model_nb <- naiveBayes(classe ~., data=subTraining)
pred_nb <- predict(model_nb, subTesting, type="class")
confusionMatrix(pred_nb,subTesting$classe)
library(caret)
library(randomForest) #Random forest for classification and regression
library(rpart) # Regressive Partitioning and Regression trees
confusionMatrix(pred_nb,subTesting$classe)
model_svm <- svm(classe ~., data=subTraining)
pred_svm <- predict(model_svm, subTesting, type="class")
confusionMatrix(pred_svm,subTesting$classe)
a<-confusionMatrix(pred_svm,subTesting$classe)
class(a)
a
a$table
a$overall
a$overall[1]
a$overall[2]
?confusionMatrix
plot(model_svm,subTesting)
summary(model_sbm)
summary(model_svm)
plot(model_svm,subTraining)
model_svm
pred_svm <- predict(model_svm, subTesting, type="class")
# Summarize SVM results.
# Accuracy= 0.9462, 95% CI(0.9395, 0.9523)
res_svm <- confusionMatrix(pred_svm,subTesting$classe)
res_svm
plot(model_svm,subTraining)
pred_svm <- predict(model_svm, subTesting[,-1], type="class")
# Summarize SVM results.
# Accuracy= 0.9462, 95% CI(0.9395, 0.9523)
res_svm <- confusionMatrix(pred_svm,subTesting$classe)
res_svm
install.packages("ada")
library("rpart")
library("ada")
model_ada <- ada(class~., data=subTraining,type="gentle",iter=70)
class(subTraining)
matrixtraining <- as.matrix(subTraining)
model_ada <- ada(class~., data=matrixtraining,type="gentle",iter=70)
model_ada <- ada(class~., data=subTraining,type="gentle",iter=70)
subTesting[,-1]
subTesting[,1]
ncol(subTesting)
model_ada <- ada(class~., data=subTraining,test.x=subTesting[,-1],test.y=subTesting[,ncol(subTesting)],type="gentle",iter=70)
control <- rpart.control(cp = -1, maxdepth = 14,maxcompete = 1,xval = 0)
model_ada <- ada(class~., data=subTraining,test.x=subTesting[,-1],test.y=subTesting[,ncol(subTesting)],type="gentle",control=control, iter=70)
model_ada <- ada(classe~., data=subTraining,test.x=subTesting[,-1],test.y=subTesting[,ncol(subTesting)],type="gentle",control=control, iter=70)
model_ada <- ada(classe~., data=subTraining,test.x=subTesting[,-1],test.y=subTesting[,ncol(subTesting)],type="class",control=control, iter=70)
model_ada <- ada(classe~., data=subTraining,test.x=subTesting[,-1],test.y=subTesting[,ncol(subTesting)],type="discrete",control=control, iter=70)
?svm
model_svm <- svm(classe ~., data=subTraining,type="C-classification")
pred_svm <- predict(model_svm, subTesting, type="class")
# Summarize SVM results.
# Accuracy= 0.9462, 95% CI(0.9395, 0.9523)
res_svm <- confusionMatrix(pred_svm,subTesting$classe)
res_svm
res_svm$overall
compare <- cbind(res_svm$overall,res_rf$overall)
compare <- cbind(res_svm$overall,res_nb$overall)
res_nb <- confusionMatrix(pred_nb,subTesting$classe)
res_nb$overall
res_nb <- confusionMatrix(pred_nb,subTesting$classe)
compare <- cbind(res_svm$overall,res_nb$overall)
compare
?data.frame
cp <- data.frame(res_svm$overall,res_nb$overall)
cp
res <- predict(model_rf, testing, type="class")
res
model_ada <- train(classe ~., method="gbm", verbose=False, data=subTraining)
library(caret)
model_ada <- train(classe ~., method="gbm", verbose=False, data=subTraining)
model_ada <- train(classe ~., method="gbm", verbose=False, data=subTraining)
model_ada <- train(classe ~., method="gbm", data=subTraining)
model_gbm <- train(classe ~., method="gbm", data=subTraining)
call.packages("ipred")
call.packages <- function(mypkg) {
if(!is.element(mypkg, installed.packages()[,1]) ){install.packages(mypkg)}
library(mypkg,character.only = T)}
call.packages("ipred")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
res[1]
res[1] *1
res[1] * 1
class(res[1])
as.numeric(res[1])
as.character(res[1])
res1 <- as.character(res)
res1
res1[1]
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(res1)
