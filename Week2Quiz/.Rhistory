names
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
histogram(concrete$Superplasticizer)
histogram(log(concrete$Superplasticizer)
)
View(concrete)
histogram(log(concrete$Superplasticizer+1)
)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages('knitr', dependencies = TRUE)
View(adData)
IL_str <- grep("^IL", colnames(training), value = TRUE)
IL_str
?preProcess
?preProcess
??preProcess??
IL_str <- grep("^IL", colnames(training), value = TRUE)?
?
))
??preProcess?
)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
library(AppliedPredictiveModeling)
library(Hmisc)
library(caret)
?preProces
?preProcess
q4 <- preProcess(adData[,IL_str],method="pca", treshold = 0.8)
q4
summary(q4)
q4$rotation
q4 <- preProcess(adData[,IL_str],method="pca", tresh = 0.8)
q4$rotation
View(training)
View(training)
q4 <- preProcess(training[,IL_str],method="pca", tresh = 0.8)
q4$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL",colnames(training))
IL_str
IL_str <- grep("^IL",colnames(training),value=TRUE)
IL_str
library(dplyr)
new_traning <- training[,c(IL_str,"diagnosis")]
View(new_traning)
q5pca <- preProcess(new_training, method="pca", treshold=0.8)
new_training <- new_traning
q5pca <- preProcess(new_training, method="pca", treshold=0.8)
preProc <- preProcess(training[,IL_str],method="pca",threshold=0.8)
trainPC <- predict(preProc,new_training)
library(caret)
library(kernlab)
install.packages('kernlab')
library(kernlab);data(spam)
View(spam)
inTrain <- createDataPartition(y=spma$type, p=0.75,list=F)
inTrain <- createDataPartition(y=spam$type, p=0.75,list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
length(training)
dim(training)
M <- abs(cor(training[,-length(training)]))
?cor
View(M)
which(M>0.8, arr.ind=T)
diag(M) <- 0
which(M>0.8, arr.ind=T)
plot(spam[,34],spam[,32])
plot(spam[,34],spam[,40])
plot(spam[,34],spam[,40],spam[,32])
plot(spam[,34],spam[,40])+plot(spam[,34],spam[,32])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
prComp
plot(prComp$PC1, prComp$PC2)
plot(prComp$x[,1],pcComp$x[,2])
smallSpam <- spam[,c(34,32)]
prComp
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],pcComp$x[,2])
plot(prComp$x[,1],prComp$x[,2])
prComp
typeColor <- ((spam$type=="spam")*1+1)
typeColor
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab='PC1',ylab='PC2')
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
preProc <- preProcess(log10(training[,-58]+1),method='pca',pcaCamp=2)
trainPC <- predict(preProc,log10(training[,-58]+1)
)
View(trainPC)
preProc
preProc$rotation
preProc <- preProcess(log10(training[,-58]+1),method='pca',pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1)
)
View(trainPC)
modelFit <- train(training$type ~.,method='glm',data=trainPC)
modelFit <- train(training$type ~ .,method='glm',data=trainPC)
View(training)
View(trainPC)
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
library(caret)
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
?train
View(training)
testPC <- predict(preProc, log10(testing[,-58]+1))
modelFit2<- train(testing$type ~ ., method="glm",data=testPC)
confusionMatrix(testing$type, predict(modelFit,testPC))
modelFit <- train(training$type ~ ., method="glm",preProcess="pca",data=training)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
.libPaths()
library(AppliedPredictiveModeling)
library(Hmisc)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.packages("e1071")
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
?predict
modelFit
trainPC
finMod <- modelFit$finalModel
plot(finMod=1,pch=19,cex=.5)
plot(finMod,1,pch=19,cex=.5)
plot(finMod$residuals, pch=19)
?plot
?predict
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
?cut2
library(Hmisc)
?cut2
plot(training$CompressiveStrength)
?cut2
class(training)
?data.frame
row.names(training)
plot(training$CompressiveStrength,row.names(training))
names <- colnames(concrete)h
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
library(caret)
install.packages("caret")
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
library(caret)
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
histogram(training$Superplasticizer)
histogram(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
df <- data.frame(adData$diagnosis, adData[,IL_str])
head(df)
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
install.packages(e1071)
install.packages("e1071")
library(e1071)
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(moedl_NoPCA, data=testing)
?confusionMatrix
confusionMatrix(pred_NoPCA)
pred_NoPCA <- predict(moedl_NoPCA, data=testing)
pred_NoPCA <- predict(model_NoPCA, data=testing)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA)
confusionMatrix(pred_NoPCA)
names(training)
IL_str <- grep("^IL", colnames(training), value = TRUE)
training <- data.frame(training$diagnosis, training[,IL_str])
testing <- data.frame(testing$diagnosis, testing[,IL_str])
#install.packages("e1071")
library(e1071)
#Training without PCA
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
names(training)
training <- data.frame(diagnosis=training$diagnosis, training[,IL_str])
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
training <- data.frame(diagnosis=training$diagnosis, training[,IL_str])
names(training)
testing <- data.frame(diagnosis=testing$diagnosis, testing[,IL_str])
#install.packages("e1071")
library(e1071)
#Training without PCA
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA)
confusionMatrix(pred_NoPCA, testing)
?confusionMatrix
confusionMatrix(pred_NoPCA, testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
```
Create a training data set consisting of only the predictors with variable names beginning with IL and the diagnosis. Build two predictive models, one using the predictors as they are and one using PCA with principal components explaining 80% of the variance in the predictors. Use method="glm" in the train function. What is the accuracy of each method in the test set? Which is more accurate?
```{r}
#modify the training set to contain only disgnosis, and IL* predictors.
IL_str <- grep("^IL", colnames(training), value = TRUE)
training <- data.frame( training[,IL_str],diagnosis=training$diagnosis)
testing <- data.frame(testing[,IL_str],diagnosis=testing$diagnosis)
#install.packages("e1071")
library(e1071)
#Training without PCA
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)
?train
model_PCA <- train(diagnosis ~.,method="glm",data=training,preProcess="pca",trControl=trainControl(preProcOptions = list(tresh=0.8)))
pred_PCA <- predict(model_PCA,testing)
confusionMatrix(pred_PCA)
confusionMatrix(pred_PCA,testing$diagnosis)
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)
model_PCA <- train(diagnosis ~.,method="glm",data=training,preProcess="pca",trControl=trainControl(preProcOptions = list(tresh=0.8)))
pred_PCA <- predict(model_PCA,testing)
confusionMatrix(pred_PCA,testing$diagnosis)
pred_NoPCA <- predict(model_NoPCA, newdata=testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)
View(testing)
head(diagnosis)
head(predictors)
head(training)
head(testing)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
IL_str <- grep("^IL", colnames(training), value = TRUE)
training <- data.frame( training[,IL_str],diagnosis=training$diagnosis)
testing <- data.frame(testing[,IL_str],diagnosis=testing$diagnosis)
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
head(model_NoPCA)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
head(modelFit)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#modify the training set to contain only disgnosis, and IL* predictors.
IL_str <- grep("^IL", colnames(training), value = TRUE)
training1 <- data.frame( training[,IL_str],diagnosis=training$diagnosis)
testing1 <- data.frame(testing[,IL_str],diagnosis=testing$diagnosis)
#install.packages("e1071")
library(e1071)
#Train without PCA
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)
#Train with PCA preprocessing
model_PCA <- train(diagnosis ~.,method="glm",data=training,preProcess="pca",trControl=trainControl(preProcOptions = list(tresh=0.8)))
pred_PCA <- predict(model_PCA,testing)
confusionMatrix(pred_PCA,testing$diagnosis)
View(training)
View(training)
View(training1)
View(training1)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
View(training)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#modify the training set to contain only disgnosis, and IL* predictors.
IL_str <- grep("^IL", colnames(training), value = TRUE)
training <- data.frame(diagnosis=training$diagnosis,training[,IL_str])
testing <- data.frame(diagnosis=testing$diagnosis,testing[,IL_str])
#install.packages("e1071")
library(e1071)
#Train without PCA
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)
#Train with PCA preprocessing
model_PCA <- train(diagnosis ~.,method="glm",data=training,preProcess="pca",trControl=trainControl(preProcOptions = list(tresh=0.8)))
pred_PCA <- predict(model_PCA,testing)
confusionMatrix(pred_PCA,testing$diagnosis)
confusionMatrix(pred_NoPCA, testing$diagnosis)
confusionMatrix(pred_PCA,testing$diagnosis)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training1 = df[inTrain, ]
testing1 = df[-inTrain, ]
View(training)
View(training1)
confusionMatrix(pred_PCA,testing$diagnosis)$overall
confusionMatrix(pred_NoPCA, testing$diagnosis)$overall
#modify the training set to contain only disgnosis, and IL* predictors.
IL_str <- grep("^IL", colnames(training), value = TRUE)
training <- data.frame(diagnosis=training$diagnosis,training[,IL_str])
testing <- data.frame(diagnosis=testing$diagnosis,testing[,IL_str])
#install.packages("e1071")
library(e1071)
#Train without PCA
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)$overall
#Train with PCA preprocessing
model_PCA <- train(diagnosis ~.,method="glm",data=training,preProcess="pca",trControl=trainControl(preProcOptions = list(tresh=0.8)))
pred_PCA <- predict(model_PCA,testing)
confusionMatrix(pred_PCA,testing$diagnosis)$overall
model_PCA <- train(diagnosis ~.,method="glm",data=training,preProcess="pca",trControl=trainControl(preProcOptions = list(thresh=0.8)))
pred_PCA <- predict(model_PCA,testing)
confusionMatrix(pred_PCA,testing$diagnosis)$overall
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)$overall
#modify the training set to contain only disgnosis, and IL* predictors.
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
#install.packages("e1071")
library(e1071)
#Train without PCA
model_NoPCA <- train(diagnosis ~., method="glm",data=training)
pred_NoPCA <- predict(model_NoPCA, testing)
confusionMatrix(pred_NoPCA, testing$diagnosis)$overall
#Train with PCA preprocessing
model_PCA <- train(diagnosis ~.,method="glm",data=training,preProcess="pca",trControl=trainControl(preProcOptions = list(thresh=0.8)))
pred_PCA <- predict(model_PCA,testing)
confusionMatrix(pred_PCA,testing$diagnosis)$overall
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
?historigram
?histogram
histogram(training$Superplasticizer)
?countpattern
xx <- rbind(c(1,0,0),c(1,0,0),c(1,0,1),c(0,1,1),c(0,1,1))
countpattern(xx)
countpattern(xx, matching=TRUE)
count.fields
sum(training$Superplasticizer==0)
histogram(training$Superplasticizer)
sum(training$Superplasticizer==0)
histogram(training$Superplasticizer)
sum(training$Superplasticizer==0)
sum(training$Superplasticizer!=0)
