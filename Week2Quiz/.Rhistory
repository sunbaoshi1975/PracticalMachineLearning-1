library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?createDataPartition
View(predictors)
View(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?cut2
library(Hmisc)
?cut2
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?plot
plot(mixtures$CompressiveStrength)
View(mixtures)
mixtures$CompressiveStrength
?cut2
?apply
?qplot
?qplot(mixtures$FlyAsh, mixtures$CompressiveStrength, data=training)
qplot(mixtures$FlyAsh, mixtures$CompressiveStrength, data=training)
qplot(mixtures$FlyAsh, mixtures$CompressiveStrength, data=mixtures)
names(training)
for (n in names(training))
{cutn <- cut2(training[n], g=5)}
{cutn <- cut2(training[n], g=5)
}
training[n]
qplot(n, CompressiveStrength,color=cutn,data=training)
n <- "Cement"
cutn <- cut2(traning[n],g=5)
for (n in names(training))
cutn <- cut2(training[n],g=5)
cutn <- cut2(training[n],g=5)
cutn <- cut2(training$n,g=5)
cutn <- cut2(training[n],g=5)
cutn <- cut2(training$Cement,g=5)
cutn <- cut2(training["Cement"],g=5)
qplot(n, CompressiveStrength,color=cutn,data=training)
qplot(index, CompressiveStrength,color=cutn,data=training)
View(training)
qplot(row.names, CompressiveStrength,color=cutn,data=training)
View(training)
qplot(Cement, CompressiveStrength,color=cutn,data=training)
qplot(row.names, CompressiveStrength,color=cutn,data=training)
qplot(training$row.names, CompressiveStrength,color=cutn,data=training)
qplot(rownames, CompressiveStrength,color=cutn,data=training)
training$row.names
training[1,]
training[2,]
training[2,1]
training[2,]$row.names
qplot(row.names(training), CompressiveStrength,color=cutn,data=training)
?cut2
cutn <- cut2(training[n],g=5)
cutn <- cut2(training$training,g=5)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
names <- colnames(concrete)
names <- names[-length(names)]
names
names <- colnames(concrete)
names
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
histogram(concrete$Superplasticizer)
histogram(log(concrete$Superplasticizer)
)
View(concrete)
histogram(log(concrete$Superplasticizer+1)
)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages('knitr', dependencies = TRUE)
View(adData)
IL_str <- grep("^IL", colnames(training), value = TRUE)
IL_str
?preProcess
?preProcess
??preProcess??
IL_str <- grep("^IL", colnames(training), value = TRUE)?
?
))
??preProcess?
)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
library(AppliedPredictiveModeling)
library(Hmisc)
library(caret)
?preProces
?preProcess
q4 <- preProcess(adData[,IL_str],method="pca", treshold = 0.8)
q4
summary(q4)
q4$rotation
q4 <- preProcess(adData[,IL_str],method="pca", tresh = 0.8)
q4$rotation
View(training)
View(training)
q4 <- preProcess(training[,IL_str],method="pca", tresh = 0.8)
q4$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL",colnames(training))
IL_str
IL_str <- grep("^IL",colnames(training),value=TRUE)
IL_str
library(dplyr)
new_traning <- training[,c(IL_str,"diagnosis")]
View(new_traning)
q5pca <- preProcess(new_training, method="pca", treshold=0.8)
new_training <- new_traning
q5pca <- preProcess(new_training, method="pca", treshold=0.8)
preProc <- preProcess(training[,IL_str],method="pca",threshold=0.8)
trainPC <- predict(preProc,new_training)
library(caret)
library(kernlab)
install.packages('kernlab')
library(kernlab);data(spam)
View(spam)
inTrain <- createDataPartition(y=spma$type, p=0.75,list=F)
inTrain <- createDataPartition(y=spam$type, p=0.75,list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
length(training)
dim(training)
M <- abs(cor(training[,-length(training)]))
?cor
View(M)
which(M>0.8, arr.ind=T)
diag(M) <- 0
which(M>0.8, arr.ind=T)
plot(spam[,34],spam[,32])
plot(spam[,34],spam[,40])
plot(spam[,34],spam[,40],spam[,32])
plot(spam[,34],spam[,40])+plot(spam[,34],spam[,32])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
prComp
plot(prComp$PC1, prComp$PC2)
plot(prComp$x[,1],pcComp$x[,2])
smallSpam <- spam[,c(34,32)]
prComp
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],pcComp$x[,2])
plot(prComp$x[,1],prComp$x[,2])
prComp
typeColor <- ((spam$type=="spam")*1+1)
typeColor
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab='PC1',ylab='PC2')
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
preProc <- preProcess(log10(training[,-58]+1),method='pca',pcaCamp=2)
trainPC <- predict(preProc,log10(training[,-58]+1)
)
View(trainPC)
preProc
preProc$rotation
preProc <- preProcess(log10(training[,-58]+1),method='pca',pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1)
)
View(trainPC)
modelFit <- train(training$type ~.,method='glm',data=trainPC)
modelFit <- train(training$type ~ .,method='glm',data=trainPC)
View(training)
View(trainPC)
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
library(caret)
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
?train
View(training)
testPC <- predict(preProc, log10(testing[,-58]+1))
modelFit2<- train(testing$type ~ ., method="glm",data=testPC)
confusionMatrix(testing$type, predict(modelFit,testPC))
modelFit <- train(training$type ~ ., method="glm",preProcess="pca",data=training)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
.libPaths()
library(AppliedPredictiveModeling)
library(Hmisc)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.packages("e1071")
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
?predict
modelFit
trainPC
finMod <- modelFit$finalModel
plot(finMod=1,pch=19,cex=.5)
plot(finMod,1,pch=19,cex=.5)
plot(finMod$residuals, pch=19)
?plot
?predict
