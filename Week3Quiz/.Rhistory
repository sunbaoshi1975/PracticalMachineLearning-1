library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
traing <- segmentationOriginal
inTrain <- createDataPartition(y=traing$Case,p = 0.75,list=F)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
inTrain <- createDataPartition(y=data$Case, p=0.75, list=F)
training <- data[,intrain]
training <- data[inTrain,]
testing <- data[-inTrain,]
set.seed(125)
model_q1 <- train(Case ~., data=training,method="rpart")
model_q1
plotcp(model_q1)
printcp(model_q1)
model_q1$finalModel
data <- segmentationOriginal
training <- subset(data, Case=="Train")
testing <- subset(data, Case=="Test")
set.seed(125)
model_q1 <- train(Case ~., data=training,method="rpart")
model_q1 <- train(Class ~., data=training,method="rpart")
model_q1$finalModel
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
plot(model_q1$finalModel, uniform = TRUE, main = "Classification Tree")
text(model_q1$finalModel, use.n = TRUE, all = TRUE, cex = .8)
fancyRpartPlot(model_q1$finalModel)
install.packages(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(model_q1$finalModel)
library(rpart)
fancyRpartPlot(model_q1$finalModel)
install.packages(pgmm)
install.packages("pgmm"
)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(newdata)
View(olive)
model_q3 <- train(Area ~., data=olive, method="rpart")
pred_q3 <- predict(model_q3, newdata)
pred_q3
model_q3
library(randomforest)
model_q3 <- train(Area ~., data=olive, method="rf")
library(randomForest)
model_q3 <- randomForest(Area ~., data=olive)
pred_q3 <- predict(model_q3, newdata)
pred_q3
model <- train(Area ~ ., data = olive, method = "rpart2")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
pred_q3 <- predict(model_q3, newdata = newdata)
pred_q3
model <- train(Area ~ ., data = olive, method = "rpart2")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
model <- train(Area ~ ., data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
model_q3 <- train(Area ~., data=olive,method="rpart")
pred_q3 <- predict(model_q3, newdata = newdata)
pred_q3
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(testSA)
training <- trainSA[,-c(1,2,5,6,)]
training <- trainSA[,-c(1,2,5,6)]
View(training)
training <- trainSA[,-c(2,4,5)]
View(training)
class(trainSA)
colnames(trainSA)
training <- trainSA[,-c(1,4,5)]
View(training)
model_q4 <- train(chd ~., data=training, method="glm", family="binomial")
pred_q4 <- predict(model_q4, testSA)
confusionMatrix(pred_q4)
confusionMatrix(pred_q4$chd)
?confusionMatrix
?predict
testing <- testSA[,-c(1,4,5)]
model_q4 <- train(chd ~., data=training, method="glm", family="binomial")
pred_q4 <- predict(model_q4, testSA)
pred_q4 <- predict(model_q4, testing)
confusionMatrix(pred_q4)
pred_q4 <- predict(model_q4, newdata=testing)
confusionMatrix(pred_q4)
pred_q4
confusionMatrix(pred_q4,testing$chd)
pred_q4 <- predict(model_q4, newdata=testing,type=class)
confusionMatrix(pred_q4,testing$chd)
model_q4 <- train(chd ~., data=training, method="glm", family="binomial",type="C-classification")
pred_q4 <- predict(model_q4, newdata=testing)
confusionMatrix(pred_q4,testing$chd)
?level
?predict
?factor
pred_q4
pred_q41 = pred_q4[>0.5]
pred_q41 = pred_q4>0.5
confusionMatrix(pred_q41,testing$chd)
levels(pred_q4)
levels(pred_q41)
pred_q41
pred_q41 = pred_q4>0.5 *1
pred_q41
pred_q41 = as.numeric(pred_q4>0.5)
confusionMatrix(pred_q41,testing$chd)
pred_q4 = as.numeric(pred_q4>0.5)
confusionMatrix(pred_q4,testing$chd)
confusionMatrix(pred_q4,testing$chd)$overall
pred_q4_training <- predict(model_q4, newdata=traing)
pred_q4_training = as.numeric(pred_q4_training>0.5)
pred_q4_training <- predict(model_q4, newdata=training)
pred_q4_training = as.numeric(pred_q4_training>0.5)
confusionMatrix(pred_q4_training,testing$chd)$overall
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
pred_q4_training <- predict(model, newdata=training)
pred_q4_training = as.numeric(pred_q4_training>0.5)
confusionMatrix(pred_q4_training,testing$chd)$overall #results for training
pred_q4_training <- predict(model_q4, newdata=training)
pred_q4_training = as.numeric(pred_q4_training>0.5)
confusionMatrix(pred_q4_training,training$chd)$overall #results for training
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
a <- data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
View(vowel.test)
View(vowel.test)
?varImp
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
library(randomForest)
model_q5 <- randomForest(y~., data=vowel.train)
vi <- varImp(model_q5)
order(vi)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
b
order(vi)
vi[order(vi)]
vi[1]
vi[,1]
vi[1,]
vi[order(vi),]
row.names(vi)[order(vi),]
row.names(vi)[order(vi)]
revers(order(vi))
reverse(order(vi))
order(vi,decreasing = T)
